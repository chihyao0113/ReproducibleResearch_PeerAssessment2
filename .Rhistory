y <- x + f -f * x + rnorm(200, sd=0.5)
f <- factor(f, labels=c("G1", "G2",  "G3", "G4"))
xyplot(
y ~ x | f,
layout = c(4,1),
panel= function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = max(y), lty=3, col = "red" )
panel.abline(h = min(y), lty=4, col = "violet")
panel.abline(h = median(y), lty=2, col = "green")
panel.lmline(x, y, col=2)
}
)
#set.seed(10)
x <- rnorm(200)
f <- rep(0:3, each = 50)
y <- x + f -f * x + rnorm(200, sd=0.5)
f <- factor(f, labels=c("G1", "G2",  "G3", "G4"))
xyplot(
y ~ x | f,
layout = c(4,1),
panel= function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = max(y), lty=3, col = "red" )
panel.abline(h = min(y), lty=4, col = "violet")
panel.abline(h = median(y), lty=2, col = "green")
panel.lmline(x, y, col=2)
}
)
#set.seed(10)
x <- rnorm(200)
f <- rep(0:3, each = 50)
y <- x + f -f * x + rnorm(200, sd=0.5)
f <- factor(f, labels=c("G1", "G2",  "G3", "G4"))
xyplot(
y ~ x | f,
layout = c(4,1),
panel= function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = max(y), lty=3, col = "red" )
panel.abline(h = min(y), lty=4, col = "violet")
panel.abline(h = median(y), lty=2, col = "green")
panel.lmline(x, y, col=2)
}
)
#set.seed(10)
x <- rnorm(200)
f <- rep(0:3, each = 50)
y <- x + f -f * x + rnorm(200, sd=0.5)
f <- factor(f, labels=c("G1", "G2",  "G3", "G4"))
xyplot(
y ~ x | f,
layout = c(4,1),
panel= function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = max(y), lty=3, col = "red" )
panel.abline(h = min(y), lty=4, col = "violet")
panel.abline(h = median(y), lty=2, col = "green")
panel.lmline(x, y, col=2)
}
)
#set.seed(10)
x <- rnorm(200)
f <- rep(0:3, each = 50)
y <- x + f -f * x + rnorm(200, sd=0.5)
f <- factor(f, labels=c("G1", "G2",  "G3", "G4"))
xyplot(
y ~ x | f,
layout = c(4,1),
panel= function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = max(y), lty=3, col = "red" )
panel.abline(h = min(y), lty=4, col = "violet")
panel.abline(h = median(y), lty=2, col = "green")
panel.lmline(x, y, col=2)
}
)
library(ggplot2)
library(ggplot2)
str(mpg)
library(ggplot2)
qplot(displ, hwy, data=mpg)
summary(mpg)
library(ggplot2)
summary(mpg)
qplot(displ, hwy, data=mpg, color=drv)
library(ggplot2)
summary(mpg)
qplot(displ, hwy, data=mpg, color=model)
library(ggplot2)
summary(mpg)
qplot(displ, hwy, data=mpg, color=manufacturer)
library(ggplot2)
summary(mpg)
qplot(displ, hwy, data=mpg, color=year)
library(ggplot2)
summary(mpg)
qplot(displ,
hwy,
data=mpg,
color=year,
geom=c("point", "smooth"))
qplot(hwy, data=mpg, fill=year)
qplot(hwy, data=mpg, fill=drv)
qplot(hwy, data=mpg, fill=cty)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data = mpg,
facet = .~ drv)
qplot(displ, hwy, data = mpg,
facets = .~ drv)
qplot(displ, hwy, data = mpg,
facets = .~ year)
qplot(displ, hwy, data = mpg,
facets = .~ class)
qplot(displ, hwy, data = mpg,
facets = .~ class,
binwidth = 2)
qplot(displ, hwy, data = mpg,
facets = .~ drv,
binwidth = 2)
qplot(hwy, data = mpg,
facets = drv .~ ,
binwidth = 2)
qplot(hwy, data = mpg,
facets = drv .~ ,  binwidth = 2)
qplot(hwy, data = mpg,
facets = drv ~. ,  binwidth = 2)
qplot(hwy, data = mpg,
facets = class ~. ,  binwidth = 2)
str(maacs)
qplot(hwy, data = mpg,
geom="density")
qplot(hwy, data = mpg,
geom="density", fill=drv)
qplot(hwy, data = mpg,
geom=c("point", "smooth", "boxplot", "line", "histogram", "density", "bar", "jitter")
, fill=drv)
qplot(hwy, data = mpg,
geom=c("point",  "boxplot",
"line", "histogram",
"density", "bar", "jitter")
, fill=drv)
qplot(displ, hwy, data = mpg,
geom=c("point", "smooth", "boxplot",
"line", "histogram",
"density", "bar", "jitter")
, fill=drv)
qplot(displ, hwy, data = mpg,
geom=c("point",  "boxplot",
"line", "histogram",
"density", "bar", "jitter")
, fill=drv)
qplot(displ, hwy, data = mpg,
geom=c("point")
, fill=drv)
qplot(displ, hwy, data = mpg,
geom=c("boxplot")
, fill=drv)
qplot(displ, hwy, data = mpg,
geom=c("line")
, fill=drv)
qplot(displ, hwy, data = mpg,
geom=c("line")
, fill=drv)
qplot(displ, hwy, data = mpg,
geom=c("histogram")
, fill=drv)
qplot(displ, hwy, data = mpg,  use stat="identity"
geom=c("histogram")
, fill=drv)
qplot(displ, hwy, data = mpg,  use stat="identity",
geom=c("histogram")
, fill=drv)
qplot(displ, hwy, data = mpg,
geom=c("density")
, fill=drv)
qplot(displ, hwy, data = mpg,
geom="density"
, fill=drv)
qplot(hwy, data = mpg,
geom="density"
, fill=drv)
qplot(hwy, data = mpg,
geom="histogram"
, fill=drv)
qplot(hwy, data = mpg,
geom="bar"
, fill=drv)
qplot(hwy, data = mpg,
geom="jitter"
, fill=drv)
qplot(hwy, data = mpg,
geom="jitter"
, fill=drv)
qplot(hwy, data = mpg,
geom="jitter", env=displ
, fill=drv)
qplot(hwy, data = mpg,
geom="jitter", env=displ
, fill=drv)
qplot(hwy, data = mpg,
geom="density"
, fill=drv)
qplot(displ, hwy, data = mpg,
geom="smooth"
, fill=drv)
qplot(displ, hwy, data = mpg,
geom=c("point", "smooth")
, fill=drv)
qplot(displ, hwy, data = mpg,
geom=c("density", "smooth")
, fill=drv)
qplot(displ, hwy, data = mpg,
geom=c("point", "smooth")
, fill=drv)
qplot(displ, hwy, data = mpg,
geom=c("point", "smooth")
, fill=drv, method="lm")
qplot(displ, hwy, data = mpg,
geom=c("point", "smooth")
, fill=drv)
qplot(displ, hwy, data = mpg,
geom=c("point", "smooth")
, fill=drv, method="lm")
testData <- data.frame(x = 1:100, y = rnorm(100) )
testData[50,2] <- 100
plot(testData$x, testData$y, type = "1", ylim= c(-3,3) )
testData <- data.frame(x = 1:100, y = rnorm(100) )
testData[50,2] <- 100
plot(testData$x, testData$y, type = "l", ylim= c(-3,3) )
testData <- data.frame(x = 1:100, y = rnorm(100) )
testData[50,2] <- 100
plot(testData$x, testData$y, type = "l", ylim= c(-3,3) )
testData <- data.frame(x = 1:100, y = rnorm(100) )
testData[50,2] <- 100
plot(testData$x, testData$y, type = "l", ylim= c(-3,3) )
testData <- data.frame(x = 1:100, y = rnorm(100) )
testData[50,2] <- 100
plot(testData$x, testData$y, type = "l", ylim= c(-3,3) )
testData <- data.frame(x = 1:100, y = rnorm(100) )
testData[50,2] <- 100
plot(testData$x, testData$y, type = "l", ylim= c(-3,3) )
testData <- data.frame(x = 1:100, y = rnorm(100) )
testData[50,2] <- 100
plot(testData$x, testData$y, type = "l", ylim= c(-3,3) )
testData <- data.frame(x = 1:100, y = rnorm(100) )
testData[50,2] <- 100
plot(testData$x, testData$y, type = "l", ylim= c(-3,3) )
testData <- data.frame(x = 1:100, y = rnorm(100) )
testData[50,2] <- 100
plot(testData$x, testData$y, type = "l", ylim= c(-3,3) )
testData <- data.frame(x = 1:100, y = rnorm(100) )
testData[50,2] <- 100
plot(testData$x, testData$y, type = "l", ylim= c(-3,3) )
testData <- data.frame(x = 1:100, y = rnorm(100) )
testData[50,2] <- 100
plot(testData$x, testData$y, type = "l", ylim= c(-3,3) )
testData <- data.frame(x = 1:100, y = rnorm(100) )
testData[50,2] <- 100
plot(testData$x, testData$y, type = "l", ylim= c(-3,3) )
g <- gplot(testData, aes(x=x. y=y))
g + geom_line()
library(ggplot2)
testData <- data.frame(x = 1:100, y = rnorm(100) )
testData[50,2] <- 100
plot(testData$x, testData$y, type = "l", ylim= c(-3,3) )
g <- gplot(testData, aes(x=x. y=y))
g + geom_line()
library(ggplot2)
testData <- data.frame(x = 1:100, y = rnorm(100) )
testData[50,2] <- 100
plot(testData$x, testData$y, type = "l", ylim= c(-3,3) )
g <- gplot(testData, aes(x=x, y=y))
g + geom_line()
library(ggplot2)
testData <- data.frame(x = 1:100, y = rnorm(100) )
testData[50,2] <- 100
plot(testData$x, testData$y, type = "l", ylim= c(-3,3) )
g <- ggplot(testData, aes(x=x, y=y))
g + geom_line()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
Diet
BodyWeight
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(datasets)
data(airquality)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
qplot(votes, rating, data = movies)
library(ggplot2)
qplot(votes, rating, data = movies) + geom_smooth()
library(ggplot2)
qplot(votes, rating, data = movies) + stats_smooth("loess")
library(ggplot2)
qplot(votes, rating, data = movies, smooth = "loess")
text(x + 0.05, y + 0.05, labels = as.character(1:12))
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean= rep(1:3, each=4), sd=0.2)
y <- rnorm(12, mean= rep(c(1,2,1), each=4),sd=0.2)
plot(x,y,col="blue", pch=19, cex=2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean= rep(1:3, each=4), sd=0.2)
y <- rnorm(12, mean= rep(c(1,2,1), each=4),sd=0.2)
plot(x,y,col="blue", pch=19, cex=2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean= rep(1:3, each=4), sd=0.2)
y <- rnorm(12, mean= rep(c(1,2,1), each=4),sd=0.2)
plot(x,y,col="blue", pch=19, cex=2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
#Calcular distancias
dataFrame <- data.frame(x=x, y=y)
dist(dataFrame)
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean= rep(1:3, each=4), sd=0.2)
y <- rnorm(12, mean= rep(c(1,2,1), each=4),sd=0.2)
plot(x,y,col="blue", pch=19, cex=2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
#Calcular distancias
dataFrame <- data.frame(x=x, y=y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean= rep(1:3, each=4), sd=0.2)
y <- rnorm(12, mean= rep(c(1,2,1), each=4),sd=0.2)
plot(x,y,col="blue", pch=19, cex=2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean= rep(1:3, each=4), sd=0.2)
y <- rnorm(12, mean= rep(c(1,2,1), each=4),sd=0.2)
plot(x,y,col="blue", pch=19, cex=2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
#Calcular distancias
dataFrame <- data.frame(x=x, y=y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean= rep(1:3, each=4), sd=0.2)
y <- rnorm(12, mean= rep(c(1,2,1), each=4),sd=0.2)
plot(x,y,col="blue", pch=19, cex=2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
#Calcular distancias
dataFrame <- data.frame(x=x, y=y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
mean(temp)
sessionInfo()
setwd("~/GitHub/ReproducibleResearch_PeerAssessment2")
urlData <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
DataFile_bz2 <- "repdata_data_StormData.csv.bz2"
DataFileCsv <- "repdata_data_StormData.csv"
if(!file.exists(DataFile_bz2)){
download.file("http://www.newcl.org/data/zipfiles/a1.zip", DataFile_bz2)
}
download.file("http://www.newcl.org/data/zipfiles/a1.zip", DataFile_bz2)
urlData <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
DataFile_bz2 <- "repdata_data_StormData.csv.bz2"
DataFileCsv <- "repdata_data_StormData.csv"
if(!file.exists(DataFile_bz2)){
download.file(urlData, DataFile_bz2)
}
file.exists(DataFile_bz2)
length(OriginalData) == 0
OriginalData
OriginalData <- read.table(Data_CSV)
urlData <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
DataFile_bz2 <- "repdata_data_StormData.csv.bz2"
DataFileCsv <- "repdata_data_StormData.csv"
OriginalData <- read.table(Data_CSV)
Data_CSV <- unz(DataFileCsv, DataFileCsv)
OriginalData <- read.table(Data_CSV)
unlink(DataFileCsv)
unz(DataFileCsv, DataFileCsv)
unz(DataFileCsv, DataFileCsv)
unz(DataFileCsv, DataFile_bz2)
Data_CSV <- unz(DataFileCsv, DataFile_bz2)
Data_CSV
unlink(DataFileCsv)
Data_CSV <- read.table(bzfile(DataFile_bz2))
Data_CSV <- read.table(bzfile(DataFile_bz2))
bzfile(DataFile_bz2)
bunzip2(DataFile_bz2, destname=gsub("[.]bz2$", "", DataFile_bz2), overwrite=TRUE, remove=TRUE)
library(R.utils)
library(utils)
bunzip2(DataFile_bz2, destname=gsub("[.]bz2$", "", DataFile_bz2), overwrite=TRUE, remove=TRUE)
install.packages("R.utils")
library(R.utils)
bunzip2(DataFile_bz2, destname=gsub("[.]bz2$", "", DataFile_bz2), overwrite=TRUE, remove=TRUE)
IsRutilsInstalled <- require("R.utils")
IsRutilsInstalled
GettingData <- function(){
#Download compressed file
if(!file.exists(DataFile_bz2)){
download.file(urlData, DataFile_bz2)
}
#extract CSV data
if(!file.exists(DataFileCsv)){
bunzip2(DataFile_bz2, destname=DataFileCsv, overwrite=TRUE, remove=TRUE)
}
#Read Data
if(file.exists(DataFileCsv)){
OriginalData <- read.csv(DataFileCsv)
head(OriginalData)
TRUE
}else{
FALSE
}
}
IsLoaded <- GettingData();
!file.exists(DataFile_bz2)
!file.exists(DataFile_bz2)
!file.exists(DataFile_bz2)
!file.exists(DataFile_bz2)
!file.exists(DataFile_bz2)
!file.exists(DataFile_bz2)
!file.exists(DataFile_bz2)
!file.exists(DataFile_bz2)
!file.exists(DataFile_bz2)
!file.exists(DataFile_bz2)
!file.exists(DataFile_bz2)
!file.exists(DataFile_bz2)
!file.exists(DataFile_bz2)
!file.exists(DataFile_bz2)
!file.exists(DataFile_bz2)
!file.exists(DataFile_bz2)
DataFile_bz2
!file.exists(DataFile_bz2)
sessionInfo()
setwd("~/GitHub/ReproducibleResearch_PeerAssessment2")
!file.exists(DataFile_bz2)
file.exists(DataFile_bz2)
!file.exists(DataFile_bz2)
file.exists(DataFileCsv)
if(!file.exists(DataFile_bz2)){
download.file(urlData, DataFile_bz2)
}
print("CSV File exist")
IsLoaded <- GettingData();
print(!file.exists(DataFile_bz2))
GettingData <- function(){
print(!file.exists(DataFile_bz2))
#Download compressed file
if(!file.exists(DataFile_bz2)){
download.file(urlData, DataFile_bz2)
}else{
print("Compressed File exist")
}
#extract CSV data
if(!file.exists(DataFileCsv)){
bunzip2(DataFile_bz2, destname=DataFileCsv, overwrite=TRUE, remove=TRUE)
}else{
print("CSV File exist")
}
#Read Data
if(file.exists(DataFileCsv)){
OriginalData <- read.csv(DataFileCsv)
TRUE
}else{
FALSE
}
}
IsLoaded <- GettingData();
GettingData <- function(){
#Download compressed file
if(!file.exists(DataFile_bz2)){
download.file(urlData, DataFile_bz2)
}else{
print("Compressed File exist")
}
#extract CSV data
if(!file.exists(DataFileCsv)){
bunzip2(DataFile_bz2, destname=DataFileCsv, overwrite=TRUE, remove=TRUE)
}else{
print("CSV File exist")
}
#Read Data
if(file.exists(DataFileCsv)){
print("Loading CSV Data into OriginalData")
OriginalData <- read.csv(DataFileCsv)
TRUE
}else{
FALSE
}
}
IsLoaded <- GettingData();
